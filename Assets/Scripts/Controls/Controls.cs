//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Std"",
            ""id"": ""d60cadf7-b25d-4291-a29c-2ba46fb020dd"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""24911351-9c0d-408b-8189-3859cc8ba077"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""ef0b7608-367e-4570-b2ce-d6a35ff20db2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleForward"",
                    ""type"": ""Button"",
                    ""id"": ""694c7c4a-e871-41f7-a87d-221d8cf8186a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleBackward"",
                    ""type"": ""Button"",
                    ""id"": ""dac6b945-2a24-4885-b2e0-667a80ebbf2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseAbility"",
                    ""type"": ""Button"",
                    ""id"": ""9e6ecec5-9ba9-424b-afad-ad260a401d38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Button"",
                    ""id"": ""82743f9d-170d-48f9-a6fe-2693408a456e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""221a87b6-cfa1-4c9b-8f46-a71be4f077af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowBomb"",
                    ""type"": ""Button"",
                    ""id"": ""9b3baa74-4695-4ad5-a0d6-8889dee27e25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowStickyBomb"",
                    ""type"": ""Button"",
                    ""id"": ""50a28c85-c04d-43c0-9562-74ba2cac90e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27379058-b8e9-4fa6-98d1-c75ab21560c3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f6aba9d6-4ace-4a69-93fd-6d9a85104c9e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7298180e-5dd6-45a0-b02e-168d2d6cd7ac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b3958f6b-2542-489d-a57b-463439173aee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2ea900bd-33e4-4d45-8655-a5eec4f7effd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49dab366-a251-4793-add3-313c6f05b54d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cb84d7c-3119-444b-b4a6-a3bb86d46bfb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""id"": ""de5da59d-67a7-47f2-a6a6-0d88d3e917e3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2d58ed86-2302-4ea1-ae81-04aad3c54435"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f19a2585-48ed-4608-bebd-930bcd9e8ec1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6167b7bf-b60a-45bf-94d3-2213b13bd926"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4993a4b-4870-4e92-8aeb-a40e6a21a450"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f71d3dda-ba90-4950-a287-f4d4488ebb28"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowStickyBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""5a03c1c7-b6b3-466b-9afc-d8b3cd03ea1c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""48999b81-673e-4728-b513-a999a877c9f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""bbad80d2-cab2-426d-9b1b-04f5cad9a1d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugMenu"",
                    ""type"": ""Button"",
                    ""id"": ""0174bf39-9984-4727-b6d9-099e17e53822"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""34100f50-5a94-4f32-9e01-58f58d29861c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1b46c47-2bab-45b3-becc-c71ca76e8dd8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ef92a55-e699-4467-90aa-dffe71373184"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Std
        m_Std = asset.FindActionMap("Std", throwIfNotFound: true);
        m_Std_Fire = m_Std.FindAction("Fire", throwIfNotFound: true);
        m_Std_Move = m_Std.FindAction("Move", throwIfNotFound: true);
        m_Std_CycleForward = m_Std.FindAction("CycleForward", throwIfNotFound: true);
        m_Std_CycleBackward = m_Std.FindAction("CycleBackward", throwIfNotFound: true);
        m_Std_UseAbility = m_Std.FindAction("UseAbility", throwIfNotFound: true);
        m_Std_PlayerMovement = m_Std.FindAction("PlayerMovement", throwIfNotFound: true);
        m_Std_Jump = m_Std.FindAction("Jump", throwIfNotFound: true);
        m_Std_ThrowBomb = m_Std.FindAction("ThrowBomb", throwIfNotFound: true);
        m_Std_ThrowStickyBomb = m_Std.FindAction("ThrowStickyBomb", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
        m_UI_PauseMenu = m_UI.FindAction("PauseMenu", throwIfNotFound: true);
        m_UI_DebugMenu = m_UI.FindAction("DebugMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Std
    private readonly InputActionMap m_Std;
    private List<IStdActions> m_StdActionsCallbackInterfaces = new List<IStdActions>();
    private readonly InputAction m_Std_Fire;
    private readonly InputAction m_Std_Move;
    private readonly InputAction m_Std_CycleForward;
    private readonly InputAction m_Std_CycleBackward;
    private readonly InputAction m_Std_UseAbility;
    private readonly InputAction m_Std_PlayerMovement;
    private readonly InputAction m_Std_Jump;
    private readonly InputAction m_Std_ThrowBomb;
    private readonly InputAction m_Std_ThrowStickyBomb;
    public struct StdActions
    {
        private @Controls m_Wrapper;
        public StdActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Std_Fire;
        public InputAction @Move => m_Wrapper.m_Std_Move;
        public InputAction @CycleForward => m_Wrapper.m_Std_CycleForward;
        public InputAction @CycleBackward => m_Wrapper.m_Std_CycleBackward;
        public InputAction @UseAbility => m_Wrapper.m_Std_UseAbility;
        public InputAction @PlayerMovement => m_Wrapper.m_Std_PlayerMovement;
        public InputAction @Jump => m_Wrapper.m_Std_Jump;
        public InputAction @ThrowBomb => m_Wrapper.m_Std_ThrowBomb;
        public InputAction @ThrowStickyBomb => m_Wrapper.m_Std_ThrowStickyBomb;
        public InputActionMap Get() { return m_Wrapper.m_Std; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StdActions set) { return set.Get(); }
        public void AddCallbacks(IStdActions instance)
        {
            if (instance == null || m_Wrapper.m_StdActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StdActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @CycleForward.started += instance.OnCycleForward;
            @CycleForward.performed += instance.OnCycleForward;
            @CycleForward.canceled += instance.OnCycleForward;
            @CycleBackward.started += instance.OnCycleBackward;
            @CycleBackward.performed += instance.OnCycleBackward;
            @CycleBackward.canceled += instance.OnCycleBackward;
            @UseAbility.started += instance.OnUseAbility;
            @UseAbility.performed += instance.OnUseAbility;
            @UseAbility.canceled += instance.OnUseAbility;
            @PlayerMovement.started += instance.OnPlayerMovement;
            @PlayerMovement.performed += instance.OnPlayerMovement;
            @PlayerMovement.canceled += instance.OnPlayerMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @ThrowBomb.started += instance.OnThrowBomb;
            @ThrowBomb.performed += instance.OnThrowBomb;
            @ThrowBomb.canceled += instance.OnThrowBomb;
            @ThrowStickyBomb.started += instance.OnThrowStickyBomb;
            @ThrowStickyBomb.performed += instance.OnThrowStickyBomb;
            @ThrowStickyBomb.canceled += instance.OnThrowStickyBomb;
        }

        private void UnregisterCallbacks(IStdActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @CycleForward.started -= instance.OnCycleForward;
            @CycleForward.performed -= instance.OnCycleForward;
            @CycleForward.canceled -= instance.OnCycleForward;
            @CycleBackward.started -= instance.OnCycleBackward;
            @CycleBackward.performed -= instance.OnCycleBackward;
            @CycleBackward.canceled -= instance.OnCycleBackward;
            @UseAbility.started -= instance.OnUseAbility;
            @UseAbility.performed -= instance.OnUseAbility;
            @UseAbility.canceled -= instance.OnUseAbility;
            @PlayerMovement.started -= instance.OnPlayerMovement;
            @PlayerMovement.performed -= instance.OnPlayerMovement;
            @PlayerMovement.canceled -= instance.OnPlayerMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @ThrowBomb.started -= instance.OnThrowBomb;
            @ThrowBomb.performed -= instance.OnThrowBomb;
            @ThrowBomb.canceled -= instance.OnThrowBomb;
            @ThrowStickyBomb.started -= instance.OnThrowStickyBomb;
            @ThrowStickyBomb.performed -= instance.OnThrowStickyBomb;
            @ThrowStickyBomb.canceled -= instance.OnThrowStickyBomb;
        }

        public void RemoveCallbacks(IStdActions instance)
        {
            if (m_Wrapper.m_StdActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStdActions instance)
        {
            foreach (var item in m_Wrapper.m_StdActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StdActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StdActions @Std => new StdActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Newaction;
    private readonly InputAction m_UI_PauseMenu;
    private readonly InputAction m_UI_DebugMenu;
    public struct UIActions
    {
        private @Controls m_Wrapper;
        public UIActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputAction @PauseMenu => m_Wrapper.m_UI_PauseMenu;
        public InputAction @DebugMenu => m_Wrapper.m_UI_DebugMenu;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
            @PauseMenu.started += instance.OnPauseMenu;
            @PauseMenu.performed += instance.OnPauseMenu;
            @PauseMenu.canceled += instance.OnPauseMenu;
            @DebugMenu.started += instance.OnDebugMenu;
            @DebugMenu.performed += instance.OnDebugMenu;
            @DebugMenu.canceled += instance.OnDebugMenu;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
            @PauseMenu.started -= instance.OnPauseMenu;
            @PauseMenu.performed -= instance.OnPauseMenu;
            @PauseMenu.canceled -= instance.OnPauseMenu;
            @DebugMenu.started -= instance.OnDebugMenu;
            @DebugMenu.performed -= instance.OnDebugMenu;
            @DebugMenu.canceled -= instance.OnDebugMenu;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IStdActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnCycleForward(InputAction.CallbackContext context);
        void OnCycleBackward(InputAction.CallbackContext context);
        void OnUseAbility(InputAction.CallbackContext context);
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnThrowBomb(InputAction.CallbackContext context);
        void OnThrowStickyBomb(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnPauseMenu(InputAction.CallbackContext context);
        void OnDebugMenu(InputAction.CallbackContext context);
    }
}
